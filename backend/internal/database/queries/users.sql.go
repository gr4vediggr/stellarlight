// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package queries

import (
	"context"

	uuid "github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, display_name, password)
VALUES ($1, $2, $3, $4)
RETURNING id, email, display_name, password, created_at, updated_at, user_status
`

type CreateUserParams struct {
	ID          uuid.UUID
	Email       string
	DisplayName string
	Password    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.DisplayName,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserStatus,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users SET user_status = 'inactive', updated_at = now() WHERE id = $1 RETURNING id, email, display_name, password, created_at, updated_at, user_status
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserStatus,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, display_name, password, created_at, updated_at, user_status FROM users WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserStatus,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, display_name, password, created_at, updated_at, user_status FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserStatus,
	)
	return i, err
}

const purgeInactiveUsers = `-- name: PurgeInactiveUsers :exec
DELETE FROM users WHERE user_status = 'inactive' AND updated_at < NOW() - INTERVAL '30 days'
`

func (q *Queries) PurgeInactiveUsers(ctx context.Context) error {
	_, err := q.db.Exec(ctx, purgeInactiveUsers)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET display_name = $2, password = $3, updated_at = now()
WHERE id = $1 RETURNING id, email, display_name, password, created_at, updated_at, user_status
`

type UpdateUserParams struct {
	ID          uuid.UUID
	DisplayName string
	Password    string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.DisplayName, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.DisplayName,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserStatus,
	)
	return i, err
}
