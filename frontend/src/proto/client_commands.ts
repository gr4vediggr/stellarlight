// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: client_commands.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

/** Main command wrapper from client */
export interface ClientCommand {
  playerId: string;
  timestamp: number;
  /** Lobby Commands */
  lobbyCommand?:
    | LobbyCommand
    | undefined;
  /** Game Commands */
  gameCommand?:
    | GameCommand
    | undefined;
  /** Chat Commands */
  chatCommand?: ChatCommand | undefined;
  pingCommand?: PingCommand | undefined;
}

export interface LobbyCommand {
  joinLobby?: JoinLobbyCommand | undefined;
  leaveLobby?: LeaveLobbyCommand | undefined;
  setReady?: SetReadyCommand | undefined;
  setColor?: SetColorCommand | undefined;
  updateSettings?: UpdateSettingsCommand | undefined;
  startGame?: StartGameCommand | undefined;
}

export interface JoinLobbyCommand {
  inviteCode: string;
}

/** Empty - player ID is in parent ClientCommand */
export interface LeaveLobbyCommand {
}

export interface SetReadyCommand {
  ready: boolean;
}

export interface SetColorCommand {
  color: string;
}

export interface UpdateSettingsCommand {
  settings: GalaxyGenerateSettings | undefined;
}

/** Empty - uses current lobby settings */
export interface StartGameCommand {
}

export interface GameCommand {
  moveFleet?: MoveFleetCommand | undefined;
  queueConstruction?:
    | QueueConstructionCommand
    | undefined;
  /** Add more game commands as needed */
  queueFleetConstruction?: QueueFleetConstructionCommand | undefined;
}

export interface MoveFleetCommand {
  fleetId: number;
  destinationStarId: number;
}

export interface QueueConstructionCommand {
  colonyId: number;
  buildingType: string;
  quantity: number;
}

export interface QueueFleetConstructionCommand {
  colonyId: number;
  shipType: string;
  quantity: number;
}

export interface ChatCommand {
  global?: GlobalChatCommand | undefined;
  private?: PrivateChatCommand | undefined;
  lobby?: LobbyChatCommand | undefined;
}

export interface GlobalChatCommand {
  message: string;
}

export interface PrivateChatCommand {
  recipientId: string;
  message: string;
}

export interface LobbyChatCommand {
  message: string;
}

export interface GalaxyGenerateSettings {
  numStars: number;
  shape: string;
  maxHyperlanes: number;
  hyperlaneConnectivity: number;
}

export interface PingCommand {
}

function createBaseClientCommand(): ClientCommand {
  return {
    playerId: "",
    timestamp: 0,
    lobbyCommand: undefined,
    gameCommand: undefined,
    chatCommand: undefined,
    pingCommand: undefined,
  };
}

export const ClientCommand: MessageFns<ClientCommand> = {
  encode(message: ClientCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.lobbyCommand !== undefined) {
      LobbyCommand.encode(message.lobbyCommand, writer.uint32(82).fork()).join();
    }
    if (message.gameCommand !== undefined) {
      GameCommand.encode(message.gameCommand, writer.uint32(162).fork()).join();
    }
    if (message.chatCommand !== undefined) {
      ChatCommand.encode(message.chatCommand, writer.uint32(242).fork()).join();
    }
    if (message.pingCommand !== undefined) {
      PingCommand.encode(message.pingCommand, writer.uint32(322).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.lobbyCommand = LobbyCommand.decode(reader, reader.uint32());
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.gameCommand = GameCommand.decode(reader, reader.uint32());
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.chatCommand = ChatCommand.decode(reader, reader.uint32());
          continue;
        }
        case 40: {
          if (tag !== 322) {
            break;
          }

          message.pingCommand = PingCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientCommand {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      lobbyCommand: isSet(object.lobbyCommand) ? LobbyCommand.fromJSON(object.lobbyCommand) : undefined,
      gameCommand: isSet(object.gameCommand) ? GameCommand.fromJSON(object.gameCommand) : undefined,
      chatCommand: isSet(object.chatCommand) ? ChatCommand.fromJSON(object.chatCommand) : undefined,
      pingCommand: isSet(object.pingCommand) ? PingCommand.fromJSON(object.pingCommand) : undefined,
    };
  },

  toJSON(message: ClientCommand): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.lobbyCommand !== undefined) {
      obj.lobbyCommand = LobbyCommand.toJSON(message.lobbyCommand);
    }
    if (message.gameCommand !== undefined) {
      obj.gameCommand = GameCommand.toJSON(message.gameCommand);
    }
    if (message.chatCommand !== undefined) {
      obj.chatCommand = ChatCommand.toJSON(message.chatCommand);
    }
    if (message.pingCommand !== undefined) {
      obj.pingCommand = PingCommand.toJSON(message.pingCommand);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ClientCommand>, I>>(base?: I): ClientCommand {
    return ClientCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ClientCommand>, I>>(object: I): ClientCommand {
    const message = createBaseClientCommand();
    message.playerId = object.playerId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.lobbyCommand = (object.lobbyCommand !== undefined && object.lobbyCommand !== null)
      ? LobbyCommand.fromPartial(object.lobbyCommand)
      : undefined;
    message.gameCommand = (object.gameCommand !== undefined && object.gameCommand !== null)
      ? GameCommand.fromPartial(object.gameCommand)
      : undefined;
    message.chatCommand = (object.chatCommand !== undefined && object.chatCommand !== null)
      ? ChatCommand.fromPartial(object.chatCommand)
      : undefined;
    message.pingCommand = (object.pingCommand !== undefined && object.pingCommand !== null)
      ? PingCommand.fromPartial(object.pingCommand)
      : undefined;
    return message;
  },
};

function createBaseLobbyCommand(): LobbyCommand {
  return {
    joinLobby: undefined,
    leaveLobby: undefined,
    setReady: undefined,
    setColor: undefined,
    updateSettings: undefined,
    startGame: undefined,
  };
}

export const LobbyCommand: MessageFns<LobbyCommand> = {
  encode(message: LobbyCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.joinLobby !== undefined) {
      JoinLobbyCommand.encode(message.joinLobby, writer.uint32(10).fork()).join();
    }
    if (message.leaveLobby !== undefined) {
      LeaveLobbyCommand.encode(message.leaveLobby, writer.uint32(18).fork()).join();
    }
    if (message.setReady !== undefined) {
      SetReadyCommand.encode(message.setReady, writer.uint32(26).fork()).join();
    }
    if (message.setColor !== undefined) {
      SetColorCommand.encode(message.setColor, writer.uint32(34).fork()).join();
    }
    if (message.updateSettings !== undefined) {
      UpdateSettingsCommand.encode(message.updateSettings, writer.uint32(42).fork()).join();
    }
    if (message.startGame !== undefined) {
      StartGameCommand.encode(message.startGame, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LobbyCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLobbyCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.joinLobby = JoinLobbyCommand.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.leaveLobby = LeaveLobbyCommand.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.setReady = SetReadyCommand.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.setColor = SetColorCommand.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updateSettings = UpdateSettingsCommand.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.startGame = StartGameCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LobbyCommand {
    return {
      joinLobby: isSet(object.joinLobby) ? JoinLobbyCommand.fromJSON(object.joinLobby) : undefined,
      leaveLobby: isSet(object.leaveLobby) ? LeaveLobbyCommand.fromJSON(object.leaveLobby) : undefined,
      setReady: isSet(object.setReady) ? SetReadyCommand.fromJSON(object.setReady) : undefined,
      setColor: isSet(object.setColor) ? SetColorCommand.fromJSON(object.setColor) : undefined,
      updateSettings: isSet(object.updateSettings) ? UpdateSettingsCommand.fromJSON(object.updateSettings) : undefined,
      startGame: isSet(object.startGame) ? StartGameCommand.fromJSON(object.startGame) : undefined,
    };
  },

  toJSON(message: LobbyCommand): unknown {
    const obj: any = {};
    if (message.joinLobby !== undefined) {
      obj.joinLobby = JoinLobbyCommand.toJSON(message.joinLobby);
    }
    if (message.leaveLobby !== undefined) {
      obj.leaveLobby = LeaveLobbyCommand.toJSON(message.leaveLobby);
    }
    if (message.setReady !== undefined) {
      obj.setReady = SetReadyCommand.toJSON(message.setReady);
    }
    if (message.setColor !== undefined) {
      obj.setColor = SetColorCommand.toJSON(message.setColor);
    }
    if (message.updateSettings !== undefined) {
      obj.updateSettings = UpdateSettingsCommand.toJSON(message.updateSettings);
    }
    if (message.startGame !== undefined) {
      obj.startGame = StartGameCommand.toJSON(message.startGame);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LobbyCommand>, I>>(base?: I): LobbyCommand {
    return LobbyCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LobbyCommand>, I>>(object: I): LobbyCommand {
    const message = createBaseLobbyCommand();
    message.joinLobby = (object.joinLobby !== undefined && object.joinLobby !== null)
      ? JoinLobbyCommand.fromPartial(object.joinLobby)
      : undefined;
    message.leaveLobby = (object.leaveLobby !== undefined && object.leaveLobby !== null)
      ? LeaveLobbyCommand.fromPartial(object.leaveLobby)
      : undefined;
    message.setReady = (object.setReady !== undefined && object.setReady !== null)
      ? SetReadyCommand.fromPartial(object.setReady)
      : undefined;
    message.setColor = (object.setColor !== undefined && object.setColor !== null)
      ? SetColorCommand.fromPartial(object.setColor)
      : undefined;
    message.updateSettings = (object.updateSettings !== undefined && object.updateSettings !== null)
      ? UpdateSettingsCommand.fromPartial(object.updateSettings)
      : undefined;
    message.startGame = (object.startGame !== undefined && object.startGame !== null)
      ? StartGameCommand.fromPartial(object.startGame)
      : undefined;
    return message;
  },
};

function createBaseJoinLobbyCommand(): JoinLobbyCommand {
  return { inviteCode: "" };
}

export const JoinLobbyCommand: MessageFns<JoinLobbyCommand> = {
  encode(message: JoinLobbyCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inviteCode !== "") {
      writer.uint32(10).string(message.inviteCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JoinLobbyCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJoinLobbyCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inviteCode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JoinLobbyCommand {
    return { inviteCode: isSet(object.inviteCode) ? globalThis.String(object.inviteCode) : "" };
  },

  toJSON(message: JoinLobbyCommand): unknown {
    const obj: any = {};
    if (message.inviteCode !== "") {
      obj.inviteCode = message.inviteCode;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JoinLobbyCommand>, I>>(base?: I): JoinLobbyCommand {
    return JoinLobbyCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JoinLobbyCommand>, I>>(object: I): JoinLobbyCommand {
    const message = createBaseJoinLobbyCommand();
    message.inviteCode = object.inviteCode ?? "";
    return message;
  },
};

function createBaseLeaveLobbyCommand(): LeaveLobbyCommand {
  return {};
}

export const LeaveLobbyCommand: MessageFns<LeaveLobbyCommand> = {
  encode(_: LeaveLobbyCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LeaveLobbyCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLeaveLobbyCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LeaveLobbyCommand {
    return {};
  },

  toJSON(_: LeaveLobbyCommand): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<LeaveLobbyCommand>, I>>(base?: I): LeaveLobbyCommand {
    return LeaveLobbyCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LeaveLobbyCommand>, I>>(_: I): LeaveLobbyCommand {
    const message = createBaseLeaveLobbyCommand();
    return message;
  },
};

function createBaseSetReadyCommand(): SetReadyCommand {
  return { ready: false };
}

export const SetReadyCommand: MessageFns<SetReadyCommand> = {
  encode(message: SetReadyCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ready !== false) {
      writer.uint32(8).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetReadyCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetReadyCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetReadyCommand {
    return { ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false };
  },

  toJSON(message: SetReadyCommand): unknown {
    const obj: any = {};
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetReadyCommand>, I>>(base?: I): SetReadyCommand {
    return SetReadyCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetReadyCommand>, I>>(object: I): SetReadyCommand {
    const message = createBaseSetReadyCommand();
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBaseSetColorCommand(): SetColorCommand {
  return { color: "" };
}

export const SetColorCommand: MessageFns<SetColorCommand> = {
  encode(message: SetColorCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.color !== "") {
      writer.uint32(10).string(message.color);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SetColorCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSetColorCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.color = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SetColorCommand {
    return { color: isSet(object.color) ? globalThis.String(object.color) : "" };
  },

  toJSON(message: SetColorCommand): unknown {
    const obj: any = {};
    if (message.color !== "") {
      obj.color = message.color;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SetColorCommand>, I>>(base?: I): SetColorCommand {
    return SetColorCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SetColorCommand>, I>>(object: I): SetColorCommand {
    const message = createBaseSetColorCommand();
    message.color = object.color ?? "";
    return message;
  },
};

function createBaseUpdateSettingsCommand(): UpdateSettingsCommand {
  return { settings: undefined };
}

export const UpdateSettingsCommand: MessageFns<UpdateSettingsCommand> = {
  encode(message: UpdateSettingsCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      GalaxyGenerateSettings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSettingsCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSettingsCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.settings = GalaxyGenerateSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSettingsCommand {
    return { settings: isSet(object.settings) ? GalaxyGenerateSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: UpdateSettingsCommand): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = GalaxyGenerateSettings.toJSON(message.settings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateSettingsCommand>, I>>(base?: I): UpdateSettingsCommand {
    return UpdateSettingsCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateSettingsCommand>, I>>(object: I): UpdateSettingsCommand {
    const message = createBaseUpdateSettingsCommand();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? GalaxyGenerateSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseStartGameCommand(): StartGameCommand {
  return {};
}

export const StartGameCommand: MessageFns<StartGameCommand> = {
  encode(_: StartGameCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartGameCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartGameCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): StartGameCommand {
    return {};
  },

  toJSON(_: StartGameCommand): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<StartGameCommand>, I>>(base?: I): StartGameCommand {
    return StartGameCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartGameCommand>, I>>(_: I): StartGameCommand {
    const message = createBaseStartGameCommand();
    return message;
  },
};

function createBaseGameCommand(): GameCommand {
  return { moveFleet: undefined, queueConstruction: undefined, queueFleetConstruction: undefined };
}

export const GameCommand: MessageFns<GameCommand> = {
  encode(message: GameCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moveFleet !== undefined) {
      MoveFleetCommand.encode(message.moveFleet, writer.uint32(10).fork()).join();
    }
    if (message.queueConstruction !== undefined) {
      QueueConstructionCommand.encode(message.queueConstruction, writer.uint32(18).fork()).join();
    }
    if (message.queueFleetConstruction !== undefined) {
      QueueFleetConstructionCommand.encode(message.queueFleetConstruction, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.moveFleet = MoveFleetCommand.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.queueConstruction = QueueConstructionCommand.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.queueFleetConstruction = QueueFleetConstructionCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameCommand {
    return {
      moveFleet: isSet(object.moveFleet) ? MoveFleetCommand.fromJSON(object.moveFleet) : undefined,
      queueConstruction: isSet(object.queueConstruction)
        ? QueueConstructionCommand.fromJSON(object.queueConstruction)
        : undefined,
      queueFleetConstruction: isSet(object.queueFleetConstruction)
        ? QueueFleetConstructionCommand.fromJSON(object.queueFleetConstruction)
        : undefined,
    };
  },

  toJSON(message: GameCommand): unknown {
    const obj: any = {};
    if (message.moveFleet !== undefined) {
      obj.moveFleet = MoveFleetCommand.toJSON(message.moveFleet);
    }
    if (message.queueConstruction !== undefined) {
      obj.queueConstruction = QueueConstructionCommand.toJSON(message.queueConstruction);
    }
    if (message.queueFleetConstruction !== undefined) {
      obj.queueFleetConstruction = QueueFleetConstructionCommand.toJSON(message.queueFleetConstruction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameCommand>, I>>(base?: I): GameCommand {
    return GameCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameCommand>, I>>(object: I): GameCommand {
    const message = createBaseGameCommand();
    message.moveFleet = (object.moveFleet !== undefined && object.moveFleet !== null)
      ? MoveFleetCommand.fromPartial(object.moveFleet)
      : undefined;
    message.queueConstruction = (object.queueConstruction !== undefined && object.queueConstruction !== null)
      ? QueueConstructionCommand.fromPartial(object.queueConstruction)
      : undefined;
    message.queueFleetConstruction =
      (object.queueFleetConstruction !== undefined && object.queueFleetConstruction !== null)
        ? QueueFleetConstructionCommand.fromPartial(object.queueFleetConstruction)
        : undefined;
    return message;
  },
};

function createBaseMoveFleetCommand(): MoveFleetCommand {
  return { fleetId: 0, destinationStarId: 0 };
}

export const MoveFleetCommand: MessageFns<MoveFleetCommand> = {
  encode(message: MoveFleetCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleetId !== 0) {
      writer.uint32(8).uint64(message.fleetId);
    }
    if (message.destinationStarId !== 0) {
      writer.uint32(16).uint64(message.destinationStarId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MoveFleetCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMoveFleetCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fleetId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.destinationStarId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MoveFleetCommand {
    return {
      fleetId: isSet(object.fleetId) ? globalThis.Number(object.fleetId) : 0,
      destinationStarId: isSet(object.destinationStarId) ? globalThis.Number(object.destinationStarId) : 0,
    };
  },

  toJSON(message: MoveFleetCommand): unknown {
    const obj: any = {};
    if (message.fleetId !== 0) {
      obj.fleetId = Math.round(message.fleetId);
    }
    if (message.destinationStarId !== 0) {
      obj.destinationStarId = Math.round(message.destinationStarId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MoveFleetCommand>, I>>(base?: I): MoveFleetCommand {
    return MoveFleetCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MoveFleetCommand>, I>>(object: I): MoveFleetCommand {
    const message = createBaseMoveFleetCommand();
    message.fleetId = object.fleetId ?? 0;
    message.destinationStarId = object.destinationStarId ?? 0;
    return message;
  },
};

function createBaseQueueConstructionCommand(): QueueConstructionCommand {
  return { colonyId: 0, buildingType: "", quantity: 0 };
}

export const QueueConstructionCommand: MessageFns<QueueConstructionCommand> = {
  encode(message: QueueConstructionCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colonyId !== 0) {
      writer.uint32(8).uint64(message.colonyId);
    }
    if (message.buildingType !== "") {
      writer.uint32(18).string(message.buildingType);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).uint32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueueConstructionCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueueConstructionCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.colonyId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buildingType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueueConstructionCommand {
    return {
      colonyId: isSet(object.colonyId) ? globalThis.Number(object.colonyId) : 0,
      buildingType: isSet(object.buildingType) ? globalThis.String(object.buildingType) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: QueueConstructionCommand): unknown {
    const obj: any = {};
    if (message.colonyId !== 0) {
      obj.colonyId = Math.round(message.colonyId);
    }
    if (message.buildingType !== "") {
      obj.buildingType = message.buildingType;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueueConstructionCommand>, I>>(base?: I): QueueConstructionCommand {
    return QueueConstructionCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueueConstructionCommand>, I>>(object: I): QueueConstructionCommand {
    const message = createBaseQueueConstructionCommand();
    message.colonyId = object.colonyId ?? 0;
    message.buildingType = object.buildingType ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseQueueFleetConstructionCommand(): QueueFleetConstructionCommand {
  return { colonyId: 0, shipType: "", quantity: 0 };
}

export const QueueFleetConstructionCommand: MessageFns<QueueFleetConstructionCommand> = {
  encode(message: QueueFleetConstructionCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colonyId !== 0) {
      writer.uint32(8).uint64(message.colonyId);
    }
    if (message.shipType !== "") {
      writer.uint32(18).string(message.shipType);
    }
    if (message.quantity !== 0) {
      writer.uint32(24).uint32(message.quantity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueueFleetConstructionCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueueFleetConstructionCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.colonyId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shipType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.quantity = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueueFleetConstructionCommand {
    return {
      colonyId: isSet(object.colonyId) ? globalThis.Number(object.colonyId) : 0,
      shipType: isSet(object.shipType) ? globalThis.String(object.shipType) : "",
      quantity: isSet(object.quantity) ? globalThis.Number(object.quantity) : 0,
    };
  },

  toJSON(message: QueueFleetConstructionCommand): unknown {
    const obj: any = {};
    if (message.colonyId !== 0) {
      obj.colonyId = Math.round(message.colonyId);
    }
    if (message.shipType !== "") {
      obj.shipType = message.shipType;
    }
    if (message.quantity !== 0) {
      obj.quantity = Math.round(message.quantity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueueFleetConstructionCommand>, I>>(base?: I): QueueFleetConstructionCommand {
    return QueueFleetConstructionCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueueFleetConstructionCommand>, I>>(
    object: I,
  ): QueueFleetConstructionCommand {
    const message = createBaseQueueFleetConstructionCommand();
    message.colonyId = object.colonyId ?? 0;
    message.shipType = object.shipType ?? "";
    message.quantity = object.quantity ?? 0;
    return message;
  },
};

function createBaseChatCommand(): ChatCommand {
  return { global: undefined, private: undefined, lobby: undefined };
}

export const ChatCommand: MessageFns<ChatCommand> = {
  encode(message: ChatCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.global !== undefined) {
      GlobalChatCommand.encode(message.global, writer.uint32(10).fork()).join();
    }
    if (message.private !== undefined) {
      PrivateChatCommand.encode(message.private, writer.uint32(18).fork()).join();
    }
    if (message.lobby !== undefined) {
      LobbyChatCommand.encode(message.lobby, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.global = GlobalChatCommand.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.private = PrivateChatCommand.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.lobby = LobbyChatCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatCommand {
    return {
      global: isSet(object.global) ? GlobalChatCommand.fromJSON(object.global) : undefined,
      private: isSet(object.private) ? PrivateChatCommand.fromJSON(object.private) : undefined,
      lobby: isSet(object.lobby) ? LobbyChatCommand.fromJSON(object.lobby) : undefined,
    };
  },

  toJSON(message: ChatCommand): unknown {
    const obj: any = {};
    if (message.global !== undefined) {
      obj.global = GlobalChatCommand.toJSON(message.global);
    }
    if (message.private !== undefined) {
      obj.private = PrivateChatCommand.toJSON(message.private);
    }
    if (message.lobby !== undefined) {
      obj.lobby = LobbyChatCommand.toJSON(message.lobby);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ChatCommand>, I>>(base?: I): ChatCommand {
    return ChatCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ChatCommand>, I>>(object: I): ChatCommand {
    const message = createBaseChatCommand();
    message.global = (object.global !== undefined && object.global !== null)
      ? GlobalChatCommand.fromPartial(object.global)
      : undefined;
    message.private = (object.private !== undefined && object.private !== null)
      ? PrivateChatCommand.fromPartial(object.private)
      : undefined;
    message.lobby = (object.lobby !== undefined && object.lobby !== null)
      ? LobbyChatCommand.fromPartial(object.lobby)
      : undefined;
    return message;
  },
};

function createBaseGlobalChatCommand(): GlobalChatCommand {
  return { message: "" };
}

export const GlobalChatCommand: MessageFns<GlobalChatCommand> = {
  encode(message: GlobalChatCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GlobalChatCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGlobalChatCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GlobalChatCommand {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: GlobalChatCommand): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GlobalChatCommand>, I>>(base?: I): GlobalChatCommand {
    return GlobalChatCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GlobalChatCommand>, I>>(object: I): GlobalChatCommand {
    const message = createBaseGlobalChatCommand();
    message.message = object.message ?? "";
    return message;
  },
};

function createBasePrivateChatCommand(): PrivateChatCommand {
  return { recipientId: "", message: "" };
}

export const PrivateChatCommand: MessageFns<PrivateChatCommand> = {
  encode(message: PrivateChatCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recipientId !== "") {
      writer.uint32(10).string(message.recipientId);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PrivateChatCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePrivateChatCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.recipientId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PrivateChatCommand {
    return {
      recipientId: isSet(object.recipientId) ? globalThis.String(object.recipientId) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: PrivateChatCommand): unknown {
    const obj: any = {};
    if (message.recipientId !== "") {
      obj.recipientId = message.recipientId;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PrivateChatCommand>, I>>(base?: I): PrivateChatCommand {
    return PrivateChatCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PrivateChatCommand>, I>>(object: I): PrivateChatCommand {
    const message = createBasePrivateChatCommand();
    message.recipientId = object.recipientId ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseLobbyChatCommand(): LobbyChatCommand {
  return { message: "" };
}

export const LobbyChatCommand: MessageFns<LobbyChatCommand> = {
  encode(message: LobbyChatCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LobbyChatCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLobbyChatCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LobbyChatCommand {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: LobbyChatCommand): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LobbyChatCommand>, I>>(base?: I): LobbyChatCommand {
    return LobbyChatCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LobbyChatCommand>, I>>(object: I): LobbyChatCommand {
    const message = createBaseLobbyChatCommand();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGalaxyGenerateSettings(): GalaxyGenerateSettings {
  return { numStars: 0, shape: "", maxHyperlanes: 0, hyperlaneConnectivity: 0 };
}

export const GalaxyGenerateSettings: MessageFns<GalaxyGenerateSettings> = {
  encode(message: GalaxyGenerateSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numStars !== 0) {
      writer.uint32(8).int32(message.numStars);
    }
    if (message.shape !== "") {
      writer.uint32(18).string(message.shape);
    }
    if (message.maxHyperlanes !== 0) {
      writer.uint32(24).int32(message.maxHyperlanes);
    }
    if (message.hyperlaneConnectivity !== 0) {
      writer.uint32(32).int32(message.hyperlaneConnectivity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GalaxyGenerateSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGalaxyGenerateSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numStars = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shape = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxHyperlanes = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hyperlaneConnectivity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GalaxyGenerateSettings {
    return {
      numStars: isSet(object.numStars) ? globalThis.Number(object.numStars) : 0,
      shape: isSet(object.shape) ? globalThis.String(object.shape) : "",
      maxHyperlanes: isSet(object.maxHyperlanes) ? globalThis.Number(object.maxHyperlanes) : 0,
      hyperlaneConnectivity: isSet(object.hyperlaneConnectivity) ? globalThis.Number(object.hyperlaneConnectivity) : 0,
    };
  },

  toJSON(message: GalaxyGenerateSettings): unknown {
    const obj: any = {};
    if (message.numStars !== 0) {
      obj.numStars = Math.round(message.numStars);
    }
    if (message.shape !== "") {
      obj.shape = message.shape;
    }
    if (message.maxHyperlanes !== 0) {
      obj.maxHyperlanes = Math.round(message.maxHyperlanes);
    }
    if (message.hyperlaneConnectivity !== 0) {
      obj.hyperlaneConnectivity = Math.round(message.hyperlaneConnectivity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GalaxyGenerateSettings>, I>>(base?: I): GalaxyGenerateSettings {
    return GalaxyGenerateSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GalaxyGenerateSettings>, I>>(object: I): GalaxyGenerateSettings {
    const message = createBaseGalaxyGenerateSettings();
    message.numStars = object.numStars ?? 0;
    message.shape = object.shape ?? "";
    message.maxHyperlanes = object.maxHyperlanes ?? 0;
    message.hyperlaneConnectivity = object.hyperlaneConnectivity ?? 0;
    return message;
  },
};

function createBasePingCommand(): PingCommand {
  return {};
}

export const PingCommand: MessageFns<PingCommand> = {
  encode(_: PingCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PingCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePingCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): PingCommand {
    return {};
  },

  toJSON(_: PingCommand): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<PingCommand>, I>>(base?: I): PingCommand {
    return PingCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PingCommand>, I>>(_: I): PingCommand {
    const message = createBasePingCommand();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
