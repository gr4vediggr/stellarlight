// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: commands.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

export interface FleetMoveCommand {
  /** ID of the fleet to move */
  fleetId: string;
  /** ID of the destination star system */
  destinationSystemId: string;
}

export interface QueueConstructionCommand {
  /** ID of the colony where construction is queued */
  colonyId: string;
  /** Type of building to construct */
  buildingType: string;
}

export interface QueueFleetConstructionCommand {
  /** ID of the starbase where fleet construction is queued */
  starbaseId: string;
  /** Type of fleet to construct */
  fleetType: string;
}

function createBaseFleetMoveCommand(): FleetMoveCommand {
  return { fleetId: "", destinationSystemId: "" };
}

export const FleetMoveCommand: MessageFns<FleetMoveCommand> = {
  encode(message: FleetMoveCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleetId !== "") {
      writer.uint32(10).string(message.fleetId);
    }
    if (message.destinationSystemId !== "") {
      writer.uint32(18).string(message.destinationSystemId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FleetMoveCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFleetMoveCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleetId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationSystemId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FleetMoveCommand {
    return {
      fleetId: isSet(object.fleetId) ? globalThis.String(object.fleetId) : "",
      destinationSystemId: isSet(object.destinationSystemId) ? globalThis.String(object.destinationSystemId) : "",
    };
  },

  toJSON(message: FleetMoveCommand): unknown {
    const obj: any = {};
    if (message.fleetId !== "") {
      obj.fleetId = message.fleetId;
    }
    if (message.destinationSystemId !== "") {
      obj.destinationSystemId = message.destinationSystemId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FleetMoveCommand>, I>>(base?: I): FleetMoveCommand {
    return FleetMoveCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FleetMoveCommand>, I>>(object: I): FleetMoveCommand {
    const message = createBaseFleetMoveCommand();
    message.fleetId = object.fleetId ?? "";
    message.destinationSystemId = object.destinationSystemId ?? "";
    return message;
  },
};

function createBaseQueueConstructionCommand(): QueueConstructionCommand {
  return { colonyId: "", buildingType: "" };
}

export const QueueConstructionCommand: MessageFns<QueueConstructionCommand> = {
  encode(message: QueueConstructionCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colonyId !== "") {
      writer.uint32(10).string(message.colonyId);
    }
    if (message.buildingType !== "") {
      writer.uint32(18).string(message.buildingType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueueConstructionCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueueConstructionCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.colonyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buildingType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueueConstructionCommand {
    return {
      colonyId: isSet(object.colonyId) ? globalThis.String(object.colonyId) : "",
      buildingType: isSet(object.buildingType) ? globalThis.String(object.buildingType) : "",
    };
  },

  toJSON(message: QueueConstructionCommand): unknown {
    const obj: any = {};
    if (message.colonyId !== "") {
      obj.colonyId = message.colonyId;
    }
    if (message.buildingType !== "") {
      obj.buildingType = message.buildingType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueueConstructionCommand>, I>>(base?: I): QueueConstructionCommand {
    return QueueConstructionCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueueConstructionCommand>, I>>(object: I): QueueConstructionCommand {
    const message = createBaseQueueConstructionCommand();
    message.colonyId = object.colonyId ?? "";
    message.buildingType = object.buildingType ?? "";
    return message;
  },
};

function createBaseQueueFleetConstructionCommand(): QueueFleetConstructionCommand {
  return { starbaseId: "", fleetType: "" };
}

export const QueueFleetConstructionCommand: MessageFns<QueueFleetConstructionCommand> = {
  encode(message: QueueFleetConstructionCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.starbaseId !== "") {
      writer.uint32(10).string(message.starbaseId);
    }
    if (message.fleetType !== "") {
      writer.uint32(18).string(message.fleetType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueueFleetConstructionCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueueFleetConstructionCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.starbaseId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fleetType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueueFleetConstructionCommand {
    return {
      starbaseId: isSet(object.starbaseId) ? globalThis.String(object.starbaseId) : "",
      fleetType: isSet(object.fleetType) ? globalThis.String(object.fleetType) : "",
    };
  },

  toJSON(message: QueueFleetConstructionCommand): unknown {
    const obj: any = {};
    if (message.starbaseId !== "") {
      obj.starbaseId = message.starbaseId;
    }
    if (message.fleetType !== "") {
      obj.fleetType = message.fleetType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueueFleetConstructionCommand>, I>>(base?: I): QueueFleetConstructionCommand {
    return QueueFleetConstructionCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueueFleetConstructionCommand>, I>>(
    object: I,
  ): QueueFleetConstructionCommand {
    const message = createBaseQueueFleetConstructionCommand();
    message.starbaseId = object.starbaseId ?? "";
    message.fleetType = object.fleetType ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
