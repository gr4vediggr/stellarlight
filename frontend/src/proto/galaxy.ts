// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: galaxy.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

export interface Galaxy {
  id: string;
  name: string;
  starSystems: StarSystem[];
}

export interface StarSystem {
  id: string;
  name: string;
  /** ID of the owner empire */
  ownerId: string;
  locationX: number;
  locationY: number;
  /** IDs of neighboring star systems */
  connectedSystems: string[];
  stars: Star[];
}

export interface Star {
  id: string;
  name: string;
  type: string;
  planets: Planet[];
  /** Size of the star */
  size: number;
}

export interface Planet {
  id: string;
  name: string;
  /** Size of the planet */
  size: number;
  /** Distance from the star */
  orbitRadius: number;
  /** Current angle in orbit */
  angle: number;
  type: string;
}

function createBaseGalaxy(): Galaxy {
  return { id: "", name: "", starSystems: [] };
}

export const Galaxy: MessageFns<Galaxy> = {
  encode(message: Galaxy, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    for (const v of message.starSystems) {
      StarSystem.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Galaxy {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGalaxy();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.starSystems.push(StarSystem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Galaxy {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      starSystems: globalThis.Array.isArray(object?.starSystems)
        ? object.starSystems.map((e: any) => StarSystem.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Galaxy): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.starSystems?.length) {
      obj.starSystems = message.starSystems.map((e) => StarSystem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Galaxy>, I>>(base?: I): Galaxy {
    return Galaxy.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Galaxy>, I>>(object: I): Galaxy {
    const message = createBaseGalaxy();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.starSystems = object.starSystems?.map((e) => StarSystem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStarSystem(): StarSystem {
  return { id: "", name: "", ownerId: "", locationX: 0, locationY: 0, connectedSystems: [], stars: [] };
}

export const StarSystem: MessageFns<StarSystem> = {
  encode(message: StarSystem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.ownerId !== "") {
      writer.uint32(26).string(message.ownerId);
    }
    if (message.locationX !== 0) {
      writer.uint32(33).double(message.locationX);
    }
    if (message.locationY !== 0) {
      writer.uint32(41).double(message.locationY);
    }
    for (const v of message.connectedSystems) {
      writer.uint32(50).string(v!);
    }
    for (const v of message.stars) {
      Star.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StarSystem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStarSystem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.locationX = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.locationY = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.connectedSystems.push(reader.string());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.stars.push(Star.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StarSystem {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      locationX: isSet(object.locationX) ? globalThis.Number(object.locationX) : 0,
      locationY: isSet(object.locationY) ? globalThis.Number(object.locationY) : 0,
      connectedSystems: globalThis.Array.isArray(object?.connectedSystems)
        ? object.connectedSystems.map((e: any) => globalThis.String(e))
        : [],
      stars: globalThis.Array.isArray(object?.stars) ? object.stars.map((e: any) => Star.fromJSON(e)) : [],
    };
  },

  toJSON(message: StarSystem): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.locationX !== 0) {
      obj.locationX = message.locationX;
    }
    if (message.locationY !== 0) {
      obj.locationY = message.locationY;
    }
    if (message.connectedSystems?.length) {
      obj.connectedSystems = message.connectedSystems;
    }
    if (message.stars?.length) {
      obj.stars = message.stars.map((e) => Star.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StarSystem>, I>>(base?: I): StarSystem {
    return StarSystem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StarSystem>, I>>(object: I): StarSystem {
    const message = createBaseStarSystem();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.ownerId = object.ownerId ?? "";
    message.locationX = object.locationX ?? 0;
    message.locationY = object.locationY ?? 0;
    message.connectedSystems = object.connectedSystems?.map((e) => e) || [];
    message.stars = object.stars?.map((e) => Star.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStar(): Star {
  return { id: "", name: "", type: "", planets: [], size: 0 };
}

export const Star: MessageFns<Star> = {
  encode(message: Star, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    for (const v of message.planets) {
      Planet.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.size !== 0) {
      writer.uint32(41).double(message.size);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Star {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.planets.push(Planet.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.size = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Star {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      planets: globalThis.Array.isArray(object?.planets) ? object.planets.map((e: any) => Planet.fromJSON(e)) : [],
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
    };
  },

  toJSON(message: Star): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.planets?.length) {
      obj.planets = message.planets.map((e) => Planet.toJSON(e));
    }
    if (message.size !== 0) {
      obj.size = message.size;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Star>, I>>(base?: I): Star {
    return Star.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Star>, I>>(object: I): Star {
    const message = createBaseStar();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.planets = object.planets?.map((e) => Planet.fromPartial(e)) || [];
    message.size = object.size ?? 0;
    return message;
  },
};

function createBasePlanet(): Planet {
  return { id: "", name: "", size: 0, orbitRadius: 0, angle: 0, type: "" };
}

export const Planet: MessageFns<Planet> = {
  encode(message: Planet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.size !== 0) {
      writer.uint32(24).int32(message.size);
    }
    if (message.orbitRadius !== 0) {
      writer.uint32(33).double(message.orbitRadius);
    }
    if (message.angle !== 0) {
      writer.uint32(41).double(message.angle);
    }
    if (message.type !== "") {
      writer.uint32(50).string(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Planet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.size = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 33) {
            break;
          }

          message.orbitRadius = reader.double();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.angle = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.type = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Planet {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      size: isSet(object.size) ? globalThis.Number(object.size) : 0,
      orbitRadius: isSet(object.orbitRadius) ? globalThis.Number(object.orbitRadius) : 0,
      angle: isSet(object.angle) ? globalThis.Number(object.angle) : 0,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
    };
  },

  toJSON(message: Planet): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.size !== 0) {
      obj.size = Math.round(message.size);
    }
    if (message.orbitRadius !== 0) {
      obj.orbitRadius = message.orbitRadius;
    }
    if (message.angle !== 0) {
      obj.angle = message.angle;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Planet>, I>>(base?: I): Planet {
    return Planet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Planet>, I>>(object: I): Planet {
    const message = createBasePlanet();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.size = object.size ?? 0;
    message.orbitRadius = object.orbitRadius ?? 0;
    message.angle = object.angle ?? 0;
    message.type = object.type ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
