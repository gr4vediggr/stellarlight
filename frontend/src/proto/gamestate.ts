// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: gamestate.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

export interface GameStateUpdate {
  /** Update related to fleet movements */
  fleetUpdate?:
    | FleetUpdate
    | undefined;
  /** Update related to construction progress */
  constructionUpdate?:
    | ConstructionUpdate
    | undefined;
  /** Update related to diplomatic actions */
  diplomacyUpdate?:
    | DiplomacyUpdate
    | undefined;
  /** Update related to resource changes */
  resourceUpdate?:
    | ResourceUpdate
    | undefined;
  /** Update related to star system changes */
  systemUpdate?:
    | SystemUpdate
    | undefined;
  /** Update related to colony status and buildings */
  colonyUpdate?: ColonyUpdate | undefined;
}

export interface FleetUpdate {
  /** ID of the fleet being updated */
  fleetId: string;
  /** ID of the destination star system */
  destinationSystemId: string;
  /** Estimated time of arrival at the destination */
  arrivalTime: number;
}

export interface ConstructionUpdate {
  /** ID of the colony where construction is happening */
  colonyId: string;
  /** Type of building being constructed */
  buildingType: string;
  /** Progress percentage of the construction */
  progress: number;
}

export interface DiplomacyUpdate {
  /** ID of the empire involved in the diplomacy update */
  empireId: string;
  /** Action taken (e.g., alliance, war declaration) */
  action: string;
  /** ID of the target empire for the action */
  targetEmpireId: string;
}

export interface ResourceUpdate {
  /** ID of the empire whose resources are being updated */
  empireId: string;
  /** Amount of resources changed */
  resourceAmount: number;
  /** Type of resource (e.g., metal, crystal) */
  resourceType: string;
}

export interface SystemUpdate {
  /** ID of the star system being updated */
  systemId: string;
  /** ID of the empire that owns the system */
  ownerId: string;
  /** IDs of neighboring star systems */
  connectedSystems: string[];
}

export interface ColonyUpdate {
  /** ID of the colony being updated */
  colonyId: string;
  /** ID of the empire that owns the colony */
  ownerId: string;
  /** Status of the colony (e.g., active, under attack) */
  status: string;
  /** Population of the colony */
  population: number;
  /** List of buildings in the colony */
  buildings: string[];
}

function createBaseGameStateUpdate(): GameStateUpdate {
  return {
    fleetUpdate: undefined,
    constructionUpdate: undefined,
    diplomacyUpdate: undefined,
    resourceUpdate: undefined,
    systemUpdate: undefined,
    colonyUpdate: undefined,
  };
}

export const GameStateUpdate: MessageFns<GameStateUpdate> = {
  encode(message: GameStateUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleetUpdate !== undefined) {
      FleetUpdate.encode(message.fleetUpdate, writer.uint32(10).fork()).join();
    }
    if (message.constructionUpdate !== undefined) {
      ConstructionUpdate.encode(message.constructionUpdate, writer.uint32(18).fork()).join();
    }
    if (message.diplomacyUpdate !== undefined) {
      DiplomacyUpdate.encode(message.diplomacyUpdate, writer.uint32(26).fork()).join();
    }
    if (message.resourceUpdate !== undefined) {
      ResourceUpdate.encode(message.resourceUpdate, writer.uint32(34).fork()).join();
    }
    if (message.systemUpdate !== undefined) {
      SystemUpdate.encode(message.systemUpdate, writer.uint32(42).fork()).join();
    }
    if (message.colonyUpdate !== undefined) {
      ColonyUpdate.encode(message.colonyUpdate, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameStateUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleetUpdate = FleetUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.constructionUpdate = ConstructionUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.diplomacyUpdate = DiplomacyUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.resourceUpdate = ResourceUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.systemUpdate = SystemUpdate.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.colonyUpdate = ColonyUpdate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateUpdate {
    return {
      fleetUpdate: isSet(object.fleetUpdate) ? FleetUpdate.fromJSON(object.fleetUpdate) : undefined,
      constructionUpdate: isSet(object.constructionUpdate)
        ? ConstructionUpdate.fromJSON(object.constructionUpdate)
        : undefined,
      diplomacyUpdate: isSet(object.diplomacyUpdate) ? DiplomacyUpdate.fromJSON(object.diplomacyUpdate) : undefined,
      resourceUpdate: isSet(object.resourceUpdate) ? ResourceUpdate.fromJSON(object.resourceUpdate) : undefined,
      systemUpdate: isSet(object.systemUpdate) ? SystemUpdate.fromJSON(object.systemUpdate) : undefined,
      colonyUpdate: isSet(object.colonyUpdate) ? ColonyUpdate.fromJSON(object.colonyUpdate) : undefined,
    };
  },

  toJSON(message: GameStateUpdate): unknown {
    const obj: any = {};
    if (message.fleetUpdate !== undefined) {
      obj.fleetUpdate = FleetUpdate.toJSON(message.fleetUpdate);
    }
    if (message.constructionUpdate !== undefined) {
      obj.constructionUpdate = ConstructionUpdate.toJSON(message.constructionUpdate);
    }
    if (message.diplomacyUpdate !== undefined) {
      obj.diplomacyUpdate = DiplomacyUpdate.toJSON(message.diplomacyUpdate);
    }
    if (message.resourceUpdate !== undefined) {
      obj.resourceUpdate = ResourceUpdate.toJSON(message.resourceUpdate);
    }
    if (message.systemUpdate !== undefined) {
      obj.systemUpdate = SystemUpdate.toJSON(message.systemUpdate);
    }
    if (message.colonyUpdate !== undefined) {
      obj.colonyUpdate = ColonyUpdate.toJSON(message.colonyUpdate);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateUpdate>, I>>(base?: I): GameStateUpdate {
    return GameStateUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateUpdate>, I>>(object: I): GameStateUpdate {
    const message = createBaseGameStateUpdate();
    message.fleetUpdate = (object.fleetUpdate !== undefined && object.fleetUpdate !== null)
      ? FleetUpdate.fromPartial(object.fleetUpdate)
      : undefined;
    message.constructionUpdate = (object.constructionUpdate !== undefined && object.constructionUpdate !== null)
      ? ConstructionUpdate.fromPartial(object.constructionUpdate)
      : undefined;
    message.diplomacyUpdate = (object.diplomacyUpdate !== undefined && object.diplomacyUpdate !== null)
      ? DiplomacyUpdate.fromPartial(object.diplomacyUpdate)
      : undefined;
    message.resourceUpdate = (object.resourceUpdate !== undefined && object.resourceUpdate !== null)
      ? ResourceUpdate.fromPartial(object.resourceUpdate)
      : undefined;
    message.systemUpdate = (object.systemUpdate !== undefined && object.systemUpdate !== null)
      ? SystemUpdate.fromPartial(object.systemUpdate)
      : undefined;
    message.colonyUpdate = (object.colonyUpdate !== undefined && object.colonyUpdate !== null)
      ? ColonyUpdate.fromPartial(object.colonyUpdate)
      : undefined;
    return message;
  },
};

function createBaseFleetUpdate(): FleetUpdate {
  return { fleetId: "", destinationSystemId: "", arrivalTime: 0 };
}

export const FleetUpdate: MessageFns<FleetUpdate> = {
  encode(message: FleetUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleetId !== "") {
      writer.uint32(10).string(message.fleetId);
    }
    if (message.destinationSystemId !== "") {
      writer.uint32(18).string(message.destinationSystemId);
    }
    if (message.arrivalTime !== 0) {
      writer.uint32(25).double(message.arrivalTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FleetUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFleetUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleetId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.destinationSystemId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.arrivalTime = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FleetUpdate {
    return {
      fleetId: isSet(object.fleetId) ? globalThis.String(object.fleetId) : "",
      destinationSystemId: isSet(object.destinationSystemId) ? globalThis.String(object.destinationSystemId) : "",
      arrivalTime: isSet(object.arrivalTime) ? globalThis.Number(object.arrivalTime) : 0,
    };
  },

  toJSON(message: FleetUpdate): unknown {
    const obj: any = {};
    if (message.fleetId !== "") {
      obj.fleetId = message.fleetId;
    }
    if (message.destinationSystemId !== "") {
      obj.destinationSystemId = message.destinationSystemId;
    }
    if (message.arrivalTime !== 0) {
      obj.arrivalTime = message.arrivalTime;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FleetUpdate>, I>>(base?: I): FleetUpdate {
    return FleetUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FleetUpdate>, I>>(object: I): FleetUpdate {
    const message = createBaseFleetUpdate();
    message.fleetId = object.fleetId ?? "";
    message.destinationSystemId = object.destinationSystemId ?? "";
    message.arrivalTime = object.arrivalTime ?? 0;
    return message;
  },
};

function createBaseConstructionUpdate(): ConstructionUpdate {
  return { colonyId: "", buildingType: "", progress: 0 };
}

export const ConstructionUpdate: MessageFns<ConstructionUpdate> = {
  encode(message: ConstructionUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colonyId !== "") {
      writer.uint32(10).string(message.colonyId);
    }
    if (message.buildingType !== "") {
      writer.uint32(18).string(message.buildingType);
    }
    if (message.progress !== 0) {
      writer.uint32(24).int32(message.progress);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConstructionUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConstructionUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.colonyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.buildingType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.progress = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConstructionUpdate {
    return {
      colonyId: isSet(object.colonyId) ? globalThis.String(object.colonyId) : "",
      buildingType: isSet(object.buildingType) ? globalThis.String(object.buildingType) : "",
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
    };
  },

  toJSON(message: ConstructionUpdate): unknown {
    const obj: any = {};
    if (message.colonyId !== "") {
      obj.colonyId = message.colonyId;
    }
    if (message.buildingType !== "") {
      obj.buildingType = message.buildingType;
    }
    if (message.progress !== 0) {
      obj.progress = Math.round(message.progress);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConstructionUpdate>, I>>(base?: I): ConstructionUpdate {
    return ConstructionUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConstructionUpdate>, I>>(object: I): ConstructionUpdate {
    const message = createBaseConstructionUpdate();
    message.colonyId = object.colonyId ?? "";
    message.buildingType = object.buildingType ?? "";
    message.progress = object.progress ?? 0;
    return message;
  },
};

function createBaseDiplomacyUpdate(): DiplomacyUpdate {
  return { empireId: "", action: "", targetEmpireId: "" };
}

export const DiplomacyUpdate: MessageFns<DiplomacyUpdate> = {
  encode(message: DiplomacyUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.empireId !== "") {
      writer.uint32(10).string(message.empireId);
    }
    if (message.action !== "") {
      writer.uint32(18).string(message.action);
    }
    if (message.targetEmpireId !== "") {
      writer.uint32(26).string(message.targetEmpireId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DiplomacyUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDiplomacyUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.empireId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.action = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.targetEmpireId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DiplomacyUpdate {
    return {
      empireId: isSet(object.empireId) ? globalThis.String(object.empireId) : "",
      action: isSet(object.action) ? globalThis.String(object.action) : "",
      targetEmpireId: isSet(object.targetEmpireId) ? globalThis.String(object.targetEmpireId) : "",
    };
  },

  toJSON(message: DiplomacyUpdate): unknown {
    const obj: any = {};
    if (message.empireId !== "") {
      obj.empireId = message.empireId;
    }
    if (message.action !== "") {
      obj.action = message.action;
    }
    if (message.targetEmpireId !== "") {
      obj.targetEmpireId = message.targetEmpireId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DiplomacyUpdate>, I>>(base?: I): DiplomacyUpdate {
    return DiplomacyUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DiplomacyUpdate>, I>>(object: I): DiplomacyUpdate {
    const message = createBaseDiplomacyUpdate();
    message.empireId = object.empireId ?? "";
    message.action = object.action ?? "";
    message.targetEmpireId = object.targetEmpireId ?? "";
    return message;
  },
};

function createBaseResourceUpdate(): ResourceUpdate {
  return { empireId: "", resourceAmount: 0, resourceType: "" };
}

export const ResourceUpdate: MessageFns<ResourceUpdate> = {
  encode(message: ResourceUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.empireId !== "") {
      writer.uint32(10).string(message.empireId);
    }
    if (message.resourceAmount !== 0) {
      writer.uint32(17).double(message.resourceAmount);
    }
    if (message.resourceType !== "") {
      writer.uint32(26).string(message.resourceType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResourceUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResourceUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.empireId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.resourceAmount = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.resourceType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResourceUpdate {
    return {
      empireId: isSet(object.empireId) ? globalThis.String(object.empireId) : "",
      resourceAmount: isSet(object.resourceAmount) ? globalThis.Number(object.resourceAmount) : 0,
      resourceType: isSet(object.resourceType) ? globalThis.String(object.resourceType) : "",
    };
  },

  toJSON(message: ResourceUpdate): unknown {
    const obj: any = {};
    if (message.empireId !== "") {
      obj.empireId = message.empireId;
    }
    if (message.resourceAmount !== 0) {
      obj.resourceAmount = message.resourceAmount;
    }
    if (message.resourceType !== "") {
      obj.resourceType = message.resourceType;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResourceUpdate>, I>>(base?: I): ResourceUpdate {
    return ResourceUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResourceUpdate>, I>>(object: I): ResourceUpdate {
    const message = createBaseResourceUpdate();
    message.empireId = object.empireId ?? "";
    message.resourceAmount = object.resourceAmount ?? 0;
    message.resourceType = object.resourceType ?? "";
    return message;
  },
};

function createBaseSystemUpdate(): SystemUpdate {
  return { systemId: "", ownerId: "", connectedSystems: [] };
}

export const SystemUpdate: MessageFns<SystemUpdate> = {
  encode(message: SystemUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.systemId !== "") {
      writer.uint32(10).string(message.systemId);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    for (const v of message.connectedSystems) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SystemUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSystemUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.systemId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.connectedSystems.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SystemUpdate {
    return {
      systemId: isSet(object.systemId) ? globalThis.String(object.systemId) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      connectedSystems: globalThis.Array.isArray(object?.connectedSystems)
        ? object.connectedSystems.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: SystemUpdate): unknown {
    const obj: any = {};
    if (message.systemId !== "") {
      obj.systemId = message.systemId;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.connectedSystems?.length) {
      obj.connectedSystems = message.connectedSystems;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SystemUpdate>, I>>(base?: I): SystemUpdate {
    return SystemUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SystemUpdate>, I>>(object: I): SystemUpdate {
    const message = createBaseSystemUpdate();
    message.systemId = object.systemId ?? "";
    message.ownerId = object.ownerId ?? "";
    message.connectedSystems = object.connectedSystems?.map((e) => e) || [];
    return message;
  },
};

function createBaseColonyUpdate(): ColonyUpdate {
  return { colonyId: "", ownerId: "", status: "", population: 0, buildings: [] };
}

export const ColonyUpdate: MessageFns<ColonyUpdate> = {
  encode(message: ColonyUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.colonyId !== "") {
      writer.uint32(10).string(message.colonyId);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    if (message.status !== "") {
      writer.uint32(26).string(message.status);
    }
    if (message.population !== 0) {
      writer.uint32(32).int32(message.population);
    }
    for (const v of message.buildings) {
      writer.uint32(42).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColonyUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColonyUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.colonyId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.population = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.buildings.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColonyUpdate {
    return {
      colonyId: isSet(object.colonyId) ? globalThis.String(object.colonyId) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      population: isSet(object.population) ? globalThis.Number(object.population) : 0,
      buildings: globalThis.Array.isArray(object?.buildings)
        ? object.buildings.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ColonyUpdate): unknown {
    const obj: any = {};
    if (message.colonyId !== "") {
      obj.colonyId = message.colonyId;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.population !== 0) {
      obj.population = Math.round(message.population);
    }
    if (message.buildings?.length) {
      obj.buildings = message.buildings;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ColonyUpdate>, I>>(base?: I): ColonyUpdate {
    return ColonyUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ColonyUpdate>, I>>(object: I): ColonyUpdate {
    const message = createBaseColonyUpdate();
    message.colonyId = object.colonyId ?? "";
    message.ownerId = object.ownerId ?? "";
    message.status = object.status ?? "";
    message.population = object.population ?? 0;
    message.buildings = object.buildings?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
