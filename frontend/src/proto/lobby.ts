// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: lobby.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

export interface GameLobbyMessage {
  /** Timestamp */
  timestamp: number;
  playerMessage?: PlayerMessage | undefined;
  gameLoadingMessage?: GameLoadingMessage | undefined;
}

export interface GameLobbyCommand {
  /** ID of the player sending the command */
  playerId: string;
  /** Timestamp */
  timestamp: number;
  readyUp?: ReadyUpMessage | undefined;
  startGame?: StartGameMessage | undefined;
}

export interface PlayerMessage {
  playerId: string;
  displayName: string;
  color: string;
  isReady: boolean;
}

export interface ReadyUpMessage {
  userId: string;
  ready: boolean;
}

export interface GalaxyGenerateSettings {
  numStars: number;
  shape: string;
  maxHyperlanes: number;
  hyperlaneConnectivity: number;
}

export interface StartGameMessage {
  settings: GalaxyGenerateSettings | undefined;
}

export interface GameLoadingMessage {
  /** Progress of the game loading, from 0.0 to 1.0 */
  progress: number;
  text: string;
}

function createBaseGameLobbyMessage(): GameLobbyMessage {
  return { timestamp: 0, playerMessage: undefined, gameLoadingMessage: undefined };
}

export const GameLobbyMessage: MessageFns<GameLobbyMessage> = {
  encode(message: GameLobbyMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== 0) {
      writer.uint32(8).int64(message.timestamp);
    }
    if (message.playerMessage !== undefined) {
      PlayerMessage.encode(message.playerMessage, writer.uint32(18).fork()).join();
    }
    if (message.gameLoadingMessage !== undefined) {
      GameLoadingMessage.encode(message.gameLoadingMessage, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameLobbyMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameLobbyMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.playerMessage = PlayerMessage.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.gameLoadingMessage = GameLoadingMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameLobbyMessage {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      playerMessage: isSet(object.playerMessage) ? PlayerMessage.fromJSON(object.playerMessage) : undefined,
      gameLoadingMessage: isSet(object.gameLoadingMessage)
        ? GameLoadingMessage.fromJSON(object.gameLoadingMessage)
        : undefined,
    };
  },

  toJSON(message: GameLobbyMessage): unknown {
    const obj: any = {};
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.playerMessage !== undefined) {
      obj.playerMessage = PlayerMessage.toJSON(message.playerMessage);
    }
    if (message.gameLoadingMessage !== undefined) {
      obj.gameLoadingMessage = GameLoadingMessage.toJSON(message.gameLoadingMessage);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameLobbyMessage>, I>>(base?: I): GameLobbyMessage {
    return GameLobbyMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameLobbyMessage>, I>>(object: I): GameLobbyMessage {
    const message = createBaseGameLobbyMessage();
    message.timestamp = object.timestamp ?? 0;
    message.playerMessage = (object.playerMessage !== undefined && object.playerMessage !== null)
      ? PlayerMessage.fromPartial(object.playerMessage)
      : undefined;
    message.gameLoadingMessage = (object.gameLoadingMessage !== undefined && object.gameLoadingMessage !== null)
      ? GameLoadingMessage.fromPartial(object.gameLoadingMessage)
      : undefined;
    return message;
  },
};

function createBaseGameLobbyCommand(): GameLobbyCommand {
  return { playerId: "", timestamp: 0, readyUp: undefined, startGame: undefined };
}

export const GameLobbyCommand: MessageFns<GameLobbyCommand> = {
  encode(message: GameLobbyCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.timestamp !== 0) {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.readyUp !== undefined) {
      ReadyUpMessage.encode(message.readyUp, writer.uint32(26).fork()).join();
    }
    if (message.startGame !== undefined) {
      StartGameMessage.encode(message.startGame, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameLobbyCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameLobbyCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.readyUp = ReadyUpMessage.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startGame = StartGameMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameLobbyCommand {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      readyUp: isSet(object.readyUp) ? ReadyUpMessage.fromJSON(object.readyUp) : undefined,
      startGame: isSet(object.startGame) ? StartGameMessage.fromJSON(object.startGame) : undefined,
    };
  },

  toJSON(message: GameLobbyCommand): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.readyUp !== undefined) {
      obj.readyUp = ReadyUpMessage.toJSON(message.readyUp);
    }
    if (message.startGame !== undefined) {
      obj.startGame = StartGameMessage.toJSON(message.startGame);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameLobbyCommand>, I>>(base?: I): GameLobbyCommand {
    return GameLobbyCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameLobbyCommand>, I>>(object: I): GameLobbyCommand {
    const message = createBaseGameLobbyCommand();
    message.playerId = object.playerId ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.readyUp = (object.readyUp !== undefined && object.readyUp !== null)
      ? ReadyUpMessage.fromPartial(object.readyUp)
      : undefined;
    message.startGame = (object.startGame !== undefined && object.startGame !== null)
      ? StartGameMessage.fromPartial(object.startGame)
      : undefined;
    return message;
  },
};

function createBasePlayerMessage(): PlayerMessage {
  return { playerId: "", displayName: "", color: "", isReady: false };
}

export const PlayerMessage: MessageFns<PlayerMessage> = {
  encode(message: PlayerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.color !== "") {
      writer.uint32(26).string(message.color);
    }
    if (message.isReady !== false) {
      writer.uint32(32).bool(message.isReady);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.color = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isReady = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerMessage {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      color: isSet(object.color) ? globalThis.String(object.color) : "",
      isReady: isSet(object.isReady) ? globalThis.Boolean(object.isReady) : false,
    };
  },

  toJSON(message: PlayerMessage): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.color !== "") {
      obj.color = message.color;
    }
    if (message.isReady !== false) {
      obj.isReady = message.isReady;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerMessage>, I>>(base?: I): PlayerMessage {
    return PlayerMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerMessage>, I>>(object: I): PlayerMessage {
    const message = createBasePlayerMessage();
    message.playerId = object.playerId ?? "";
    message.displayName = object.displayName ?? "";
    message.color = object.color ?? "";
    message.isReady = object.isReady ?? false;
    return message;
  },
};

function createBaseReadyUpMessage(): ReadyUpMessage {
  return { userId: "", ready: false };
}

export const ReadyUpMessage: MessageFns<ReadyUpMessage> = {
  encode(message: ReadyUpMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.ready !== false) {
      writer.uint32(16).bool(message.ready);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReadyUpMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReadyUpMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ready = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReadyUpMessage {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      ready: isSet(object.ready) ? globalThis.Boolean(object.ready) : false,
    };
  },

  toJSON(message: ReadyUpMessage): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.ready !== false) {
      obj.ready = message.ready;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ReadyUpMessage>, I>>(base?: I): ReadyUpMessage {
    return ReadyUpMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ReadyUpMessage>, I>>(object: I): ReadyUpMessage {
    const message = createBaseReadyUpMessage();
    message.userId = object.userId ?? "";
    message.ready = object.ready ?? false;
    return message;
  },
};

function createBaseGalaxyGenerateSettings(): GalaxyGenerateSettings {
  return { numStars: 0, shape: "", maxHyperlanes: 0, hyperlaneConnectivity: 0 };
}

export const GalaxyGenerateSettings: MessageFns<GalaxyGenerateSettings> = {
  encode(message: GalaxyGenerateSettings, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.numStars !== 0) {
      writer.uint32(8).int32(message.numStars);
    }
    if (message.shape !== "") {
      writer.uint32(18).string(message.shape);
    }
    if (message.maxHyperlanes !== 0) {
      writer.uint32(24).int32(message.maxHyperlanes);
    }
    if (message.hyperlaneConnectivity !== 0) {
      writer.uint32(32).int32(message.hyperlaneConnectivity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GalaxyGenerateSettings {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGalaxyGenerateSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.numStars = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.shape = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maxHyperlanes = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hyperlaneConnectivity = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GalaxyGenerateSettings {
    return {
      numStars: isSet(object.numStars) ? globalThis.Number(object.numStars) : 0,
      shape: isSet(object.shape) ? globalThis.String(object.shape) : "",
      maxHyperlanes: isSet(object.maxHyperlanes) ? globalThis.Number(object.maxHyperlanes) : 0,
      hyperlaneConnectivity: isSet(object.hyperlaneConnectivity) ? globalThis.Number(object.hyperlaneConnectivity) : 0,
    };
  },

  toJSON(message: GalaxyGenerateSettings): unknown {
    const obj: any = {};
    if (message.numStars !== 0) {
      obj.numStars = Math.round(message.numStars);
    }
    if (message.shape !== "") {
      obj.shape = message.shape;
    }
    if (message.maxHyperlanes !== 0) {
      obj.maxHyperlanes = Math.round(message.maxHyperlanes);
    }
    if (message.hyperlaneConnectivity !== 0) {
      obj.hyperlaneConnectivity = Math.round(message.hyperlaneConnectivity);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GalaxyGenerateSettings>, I>>(base?: I): GalaxyGenerateSettings {
    return GalaxyGenerateSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GalaxyGenerateSettings>, I>>(object: I): GalaxyGenerateSettings {
    const message = createBaseGalaxyGenerateSettings();
    message.numStars = object.numStars ?? 0;
    message.shape = object.shape ?? "";
    message.maxHyperlanes = object.maxHyperlanes ?? 0;
    message.hyperlaneConnectivity = object.hyperlaneConnectivity ?? 0;
    return message;
  },
};

function createBaseStartGameMessage(): StartGameMessage {
  return { settings: undefined };
}

export const StartGameMessage: MessageFns<StartGameMessage> = {
  encode(message: StartGameMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.settings !== undefined) {
      GalaxyGenerateSettings.encode(message.settings, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartGameMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartGameMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.settings = GalaxyGenerateSettings.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartGameMessage {
    return { settings: isSet(object.settings) ? GalaxyGenerateSettings.fromJSON(object.settings) : undefined };
  },

  toJSON(message: StartGameMessage): unknown {
    const obj: any = {};
    if (message.settings !== undefined) {
      obj.settings = GalaxyGenerateSettings.toJSON(message.settings);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartGameMessage>, I>>(base?: I): StartGameMessage {
    return StartGameMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartGameMessage>, I>>(object: I): StartGameMessage {
    const message = createBaseStartGameMessage();
    message.settings = (object.settings !== undefined && object.settings !== null)
      ? GalaxyGenerateSettings.fromPartial(object.settings)
      : undefined;
    return message;
  },
};

function createBaseGameLoadingMessage(): GameLoadingMessage {
  return { progress: 0, text: "" };
}

export const GameLoadingMessage: MessageFns<GameLoadingMessage> = {
  encode(message: GameLoadingMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.progress !== 0) {
      writer.uint32(13).float(message.progress);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameLoadingMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameLoadingMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 13) {
            break;
          }

          message.progress = reader.float();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameLoadingMessage {
    return {
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
      text: isSet(object.text) ? globalThis.String(object.text) : "",
    };
  },

  toJSON(message: GameLoadingMessage): unknown {
    const obj: any = {};
    if (message.progress !== 0) {
      obj.progress = message.progress;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameLoadingMessage>, I>>(base?: I): GameLoadingMessage {
    return GameLoadingMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameLoadingMessage>, I>>(object: I): GameLoadingMessage {
    const message = createBaseGameLoadingMessage();
    message.progress = object.progress ?? 0;
    message.text = object.text ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
