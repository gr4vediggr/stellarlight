// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { FleetMoveCommand, QueueConstructionCommand, QueueFleetConstructionCommand } from "./commands";

export const protobufPackage = "messages";

export interface GameMessage {
  timestamp: number;
  /** Command issued by the player client to the server */
  gameState?: GameStateMessage | undefined;
}

export interface SendChatCommand {
  /** Player ID of the sender */
  playerId: string;
  /** Display name of the player sending the message */
  displayName: string;
  /** T */
  timestamp: number;
  /** The chat message content */
  message: string;
}

export interface PlayerCommand {
  /** Command to move a fleet */
  fleetMoveCommand?:
    | FleetMoveCommand
    | undefined;
  /** Command to queue a construction */
  queueConstructionCommand?:
    | QueueConstructionCommand
    | undefined;
  /** Command to queue fleet construction */
  queueFleetConstructionCommand?: QueueFleetConstructionCommand | undefined;
}

export interface GameStateMessage {
  data: string;
}

export interface IdMessage {
  id: number;
}

function createBaseGameMessage(): GameMessage {
  return { timestamp: 0, gameState: undefined };
}

export const GameMessage: MessageFns<GameMessage> = {
  encode(message: GameMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== 0) {
      writer.uint32(8).int64(message.timestamp);
    }
    if (message.gameState !== undefined) {
      GameStateMessage.encode(message.gameState, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gameState = GameStateMessage.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameMessage {
    return {
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      gameState: isSet(object.gameState) ? GameStateMessage.fromJSON(object.gameState) : undefined,
    };
  },

  toJSON(message: GameMessage): unknown {
    const obj: any = {};
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.gameState !== undefined) {
      obj.gameState = GameStateMessage.toJSON(message.gameState);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameMessage>, I>>(base?: I): GameMessage {
    return GameMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameMessage>, I>>(object: I): GameMessage {
    const message = createBaseGameMessage();
    message.timestamp = object.timestamp ?? 0;
    message.gameState = (object.gameState !== undefined && object.gameState !== null)
      ? GameStateMessage.fromPartial(object.gameState)
      : undefined;
    return message;
  },
};

function createBaseSendChatCommand(): SendChatCommand {
  return { playerId: "", displayName: "", timestamp: 0, message: "" };
}

export const SendChatCommand: MessageFns<SendChatCommand> = {
  encode(message: SendChatCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playerId !== "") {
      writer.uint32(10).string(message.playerId);
    }
    if (message.displayName !== "") {
      writer.uint32(18).string(message.displayName);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).int64(message.timestamp);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendChatCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendChatCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SendChatCommand {
    return {
      playerId: isSet(object.playerId) ? globalThis.String(object.playerId) : "",
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: SendChatCommand): unknown {
    const obj: any = {};
    if (message.playerId !== "") {
      obj.playerId = message.playerId;
    }
    if (message.displayName !== "") {
      obj.displayName = message.displayName;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SendChatCommand>, I>>(base?: I): SendChatCommand {
    return SendChatCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SendChatCommand>, I>>(object: I): SendChatCommand {
    const message = createBaseSendChatCommand();
    message.playerId = object.playerId ?? "";
    message.displayName = object.displayName ?? "";
    message.timestamp = object.timestamp ?? 0;
    message.message = object.message ?? "";
    return message;
  },
};

function createBasePlayerCommand(): PlayerCommand {
  return { fleetMoveCommand: undefined, queueConstructionCommand: undefined, queueFleetConstructionCommand: undefined };
}

export const PlayerCommand: MessageFns<PlayerCommand> = {
  encode(message: PlayerCommand, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fleetMoveCommand !== undefined) {
      FleetMoveCommand.encode(message.fleetMoveCommand, writer.uint32(10).fork()).join();
    }
    if (message.queueConstructionCommand !== undefined) {
      QueueConstructionCommand.encode(message.queueConstructionCommand, writer.uint32(18).fork()).join();
    }
    if (message.queueFleetConstructionCommand !== undefined) {
      QueueFleetConstructionCommand.encode(message.queueFleetConstructionCommand, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerCommand {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleetMoveCommand = FleetMoveCommand.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.queueConstructionCommand = QueueConstructionCommand.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.queueFleetConstructionCommand = QueueFleetConstructionCommand.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerCommand {
    return {
      fleetMoveCommand: isSet(object.fleetMoveCommand) ? FleetMoveCommand.fromJSON(object.fleetMoveCommand) : undefined,
      queueConstructionCommand: isSet(object.queueConstructionCommand)
        ? QueueConstructionCommand.fromJSON(object.queueConstructionCommand)
        : undefined,
      queueFleetConstructionCommand: isSet(object.queueFleetConstructionCommand)
        ? QueueFleetConstructionCommand.fromJSON(object.queueFleetConstructionCommand)
        : undefined,
    };
  },

  toJSON(message: PlayerCommand): unknown {
    const obj: any = {};
    if (message.fleetMoveCommand !== undefined) {
      obj.fleetMoveCommand = FleetMoveCommand.toJSON(message.fleetMoveCommand);
    }
    if (message.queueConstructionCommand !== undefined) {
      obj.queueConstructionCommand = QueueConstructionCommand.toJSON(message.queueConstructionCommand);
    }
    if (message.queueFleetConstructionCommand !== undefined) {
      obj.queueFleetConstructionCommand = QueueFleetConstructionCommand.toJSON(message.queueFleetConstructionCommand);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerCommand>, I>>(base?: I): PlayerCommand {
    return PlayerCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerCommand>, I>>(object: I): PlayerCommand {
    const message = createBasePlayerCommand();
    message.fleetMoveCommand = (object.fleetMoveCommand !== undefined && object.fleetMoveCommand !== null)
      ? FleetMoveCommand.fromPartial(object.fleetMoveCommand)
      : undefined;
    message.queueConstructionCommand =
      (object.queueConstructionCommand !== undefined && object.queueConstructionCommand !== null)
        ? QueueConstructionCommand.fromPartial(object.queueConstructionCommand)
        : undefined;
    message.queueFleetConstructionCommand =
      (object.queueFleetConstructionCommand !== undefined && object.queueFleetConstructionCommand !== null)
        ? QueueFleetConstructionCommand.fromPartial(object.queueFleetConstructionCommand)
        : undefined;
    return message;
  },
};

function createBaseGameStateMessage(): GameStateMessage {
  return { data: "" };
}

export const GameStateMessage: MessageFns<GameStateMessage> = {
  encode(message: GameStateMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.data !== "") {
      writer.uint32(10).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GameStateMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGameStateMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GameStateMessage {
    return { data: isSet(object.data) ? globalThis.String(object.data) : "" };
  },

  toJSON(message: GameStateMessage): unknown {
    const obj: any = {};
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GameStateMessage>, I>>(base?: I): GameStateMessage {
    return GameStateMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GameStateMessage>, I>>(object: I): GameStateMessage {
    const message = createBaseGameStateMessage();
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseIdMessage(): IdMessage {
  return { id: 0 };
}

export const IdMessage: MessageFns<IdMessage> = {
  encode(message: IdMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdMessage {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: IdMessage): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<IdMessage>, I>>(base?: I): IdMessage {
    return IdMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<IdMessage>, I>>(object: I): IdMessage {
    const message = createBaseIdMessage();
    message.id = object.id ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
