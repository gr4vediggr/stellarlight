// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: objects.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

export interface Building {
  /** Unique identifier for the building type */
  id: string;
  /** Name of the building */
  name: string;
  /** Level of the building */
  level: number;
  /** Time required to construct the building */
  constructionTime: number;
}

export interface Fleet {
  /** Unique identifier for the fleet */
  id: string;
  /** ID of the player who owns the fleet */
  ownerId: string;
  /** Name of the fleet */
  name: string;
  locationId: string;
  state: string;
  /** List of ships in the fleet */
  ships: Ship[];
}

export interface Ship {
  /** Unique identifier for the ship */
  id: string;
  /** Name of the ship */
  name: string;
  /** Type of the ship (e.g., "fighter", "bomber", etc.) */
  type: string;
  /** Hit points of the ship */
  hitPoints: number;
  /** Time required to construct the ship */
  constructionTime: number;
}

export interface Colony {
  /** Unique identifier for the colony */
  id: string;
  /** Name of the colony */
  name: string;
  /** ID of the player who owns the colony */
  ownerId: string;
  /** ID of the planet where the colony is situated */
  planetId: string;
  /** Population of the colony */
  population: number;
  /** List of buildings in the colony */
  buildings: Building[];
}

export interface VisibleGameStateUpdate {
  /** List of fleets in the game */
  fleets: Fleet[];
  /** List of colonies in the game */
  colonies: Colony[];
  /** List of ships in the game */
  ships: Ship[];
}

function createBaseBuilding(): Building {
  return { id: "", name: "", level: 0, constructionTime: 0 };
}

export const Building: MessageFns<Building> = {
  encode(message: Building, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.level !== 0) {
      writer.uint32(32).int32(message.level);
    }
    if (message.constructionTime !== 0) {
      writer.uint32(40).int64(message.constructionTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Building {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuilding();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.constructionTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Building {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      constructionTime: isSet(object.constructionTime) ? globalThis.Number(object.constructionTime) : 0,
    };
  },

  toJSON(message: Building): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.constructionTime !== 0) {
      obj.constructionTime = Math.round(message.constructionTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Building>, I>>(base?: I): Building {
    return Building.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Building>, I>>(object: I): Building {
    const message = createBaseBuilding();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.level = object.level ?? 0;
    message.constructionTime = object.constructionTime ?? 0;
    return message;
  },
};

function createBaseFleet(): Fleet {
  return { id: "", ownerId: "", name: "", locationId: "", state: "", ships: [] };
}

export const Fleet: MessageFns<Fleet> = {
  encode(message: Fleet, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.ownerId !== "") {
      writer.uint32(18).string(message.ownerId);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.locationId !== "") {
      writer.uint32(34).string(message.locationId);
    }
    if (message.state !== "") {
      writer.uint32(42).string(message.state);
    }
    for (const v of message.ships) {
      Ship.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fleet {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFleet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.locationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.ships.push(Ship.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fleet {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      locationId: isSet(object.locationId) ? globalThis.String(object.locationId) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      ships: globalThis.Array.isArray(object?.ships) ? object.ships.map((e: any) => Ship.fromJSON(e)) : [],
    };
  },

  toJSON(message: Fleet): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.locationId !== "") {
      obj.locationId = message.locationId;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.ships?.length) {
      obj.ships = message.ships.map((e) => Ship.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Fleet>, I>>(base?: I): Fleet {
    return Fleet.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Fleet>, I>>(object: I): Fleet {
    const message = createBaseFleet();
    message.id = object.id ?? "";
    message.ownerId = object.ownerId ?? "";
    message.name = object.name ?? "";
    message.locationId = object.locationId ?? "";
    message.state = object.state ?? "";
    message.ships = object.ships?.map((e) => Ship.fromPartial(e)) || [];
    return message;
  },
};

function createBaseShip(): Ship {
  return { id: "", name: "", type: "", hitPoints: 0, constructionTime: 0 };
}

export const Ship: MessageFns<Ship> = {
  encode(message: Ship, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.hitPoints !== 0) {
      writer.uint32(32).int32(message.hitPoints);
    }
    if (message.constructionTime !== 0) {
      writer.uint32(40).int64(message.constructionTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Ship {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShip();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.hitPoints = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.constructionTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Ship {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      hitPoints: isSet(object.hitPoints) ? globalThis.Number(object.hitPoints) : 0,
      constructionTime: isSet(object.constructionTime) ? globalThis.Number(object.constructionTime) : 0,
    };
  },

  toJSON(message: Ship): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.hitPoints !== 0) {
      obj.hitPoints = Math.round(message.hitPoints);
    }
    if (message.constructionTime !== 0) {
      obj.constructionTime = Math.round(message.constructionTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Ship>, I>>(base?: I): Ship {
    return Ship.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Ship>, I>>(object: I): Ship {
    const message = createBaseShip();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.type = object.type ?? "";
    message.hitPoints = object.hitPoints ?? 0;
    message.constructionTime = object.constructionTime ?? 0;
    return message;
  },
};

function createBaseColony(): Colony {
  return { id: "", name: "", ownerId: "", planetId: "", population: 0, buildings: [] };
}

export const Colony: MessageFns<Colony> = {
  encode(message: Colony, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.ownerId !== "") {
      writer.uint32(26).string(message.ownerId);
    }
    if (message.planetId !== "") {
      writer.uint32(34).string(message.planetId);
    }
    if (message.population !== 0) {
      writer.uint32(40).int64(message.population);
    }
    for (const v of message.buildings) {
      Building.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Colony {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColony();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ownerId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.planetId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.population = longToNumber(reader.int64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.buildings.push(Building.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Colony {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ownerId: isSet(object.ownerId) ? globalThis.String(object.ownerId) : "",
      planetId: isSet(object.planetId) ? globalThis.String(object.planetId) : "",
      population: isSet(object.population) ? globalThis.Number(object.population) : 0,
      buildings: globalThis.Array.isArray(object?.buildings)
        ? object.buildings.map((e: any) => Building.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Colony): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ownerId !== "") {
      obj.ownerId = message.ownerId;
    }
    if (message.planetId !== "") {
      obj.planetId = message.planetId;
    }
    if (message.population !== 0) {
      obj.population = Math.round(message.population);
    }
    if (message.buildings?.length) {
      obj.buildings = message.buildings.map((e) => Building.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Colony>, I>>(base?: I): Colony {
    return Colony.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Colony>, I>>(object: I): Colony {
    const message = createBaseColony();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.ownerId = object.ownerId ?? "";
    message.planetId = object.planetId ?? "";
    message.population = object.population ?? 0;
    message.buildings = object.buildings?.map((e) => Building.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVisibleGameStateUpdate(): VisibleGameStateUpdate {
  return { fleets: [], colonies: [], ships: [] };
}

export const VisibleGameStateUpdate: MessageFns<VisibleGameStateUpdate> = {
  encode(message: VisibleGameStateUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.fleets) {
      Fleet.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.colonies) {
      Colony.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.ships) {
      Ship.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VisibleGameStateUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVisibleGameStateUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fleets.push(Fleet.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.colonies.push(Colony.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.ships.push(Ship.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VisibleGameStateUpdate {
    return {
      fleets: globalThis.Array.isArray(object?.fleets) ? object.fleets.map((e: any) => Fleet.fromJSON(e)) : [],
      colonies: globalThis.Array.isArray(object?.colonies) ? object.colonies.map((e: any) => Colony.fromJSON(e)) : [],
      ships: globalThis.Array.isArray(object?.ships) ? object.ships.map((e: any) => Ship.fromJSON(e)) : [],
    };
  },

  toJSON(message: VisibleGameStateUpdate): unknown {
    const obj: any = {};
    if (message.fleets?.length) {
      obj.fleets = message.fleets.map((e) => Fleet.toJSON(e));
    }
    if (message.colonies?.length) {
      obj.colonies = message.colonies.map((e) => Colony.toJSON(e));
    }
    if (message.ships?.length) {
      obj.ships = message.ships.map((e) => Ship.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VisibleGameStateUpdate>, I>>(base?: I): VisibleGameStateUpdate {
    return VisibleGameStateUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VisibleGameStateUpdate>, I>>(object: I): VisibleGameStateUpdate {
    const message = createBaseVisibleGameStateUpdate();
    message.fleets = object.fleets?.map((e) => Fleet.fromPartial(e)) || [];
    message.colonies = object.colonies?.map((e) => Colony.fromPartial(e)) || [];
    message.ships = object.ships?.map((e) => Ship.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
