// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.31.1
// source: types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "messages";

export interface BuildingType {
  /** Unique identifier for the building type */
  id: string;
  /** Name of the building type */
  name: string;
  /** Level of the building type */
  level: number;
  /** Time required to construct the building type */
  constructionTime: number;
}

export interface ShipType {
  /** Unique identifier for the ship type */
  id: string;
  /** Name of the ship type */
  name: string;
  /** Hit points of the ship type */
  hitPoints: number;
  /** Time required to construct the ship type */
  constructionTime: number;
}

function createBaseBuildingType(): BuildingType {
  return { id: "", name: "", level: 0, constructionTime: 0 };
}

export const BuildingType: MessageFns<BuildingType> = {
  encode(message: BuildingType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.level !== 0) {
      writer.uint32(24).int32(message.level);
    }
    if (message.constructionTime !== 0) {
      writer.uint32(32).int64(message.constructionTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuildingType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuildingType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.level = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.constructionTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuildingType {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      constructionTime: isSet(object.constructionTime) ? globalThis.Number(object.constructionTime) : 0,
    };
  },

  toJSON(message: BuildingType): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.level !== 0) {
      obj.level = Math.round(message.level);
    }
    if (message.constructionTime !== 0) {
      obj.constructionTime = Math.round(message.constructionTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuildingType>, I>>(base?: I): BuildingType {
    return BuildingType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuildingType>, I>>(object: I): BuildingType {
    const message = createBaseBuildingType();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.level = object.level ?? 0;
    message.constructionTime = object.constructionTime ?? 0;
    return message;
  },
};

function createBaseShipType(): ShipType {
  return { id: "", name: "", hitPoints: 0, constructionTime: 0 };
}

export const ShipType: MessageFns<ShipType> = {
  encode(message: ShipType, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.hitPoints !== 0) {
      writer.uint32(24).int32(message.hitPoints);
    }
    if (message.constructionTime !== 0) {
      writer.uint32(32).int64(message.constructionTime);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ShipType {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseShipType();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.hitPoints = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.constructionTime = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ShipType {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      hitPoints: isSet(object.hitPoints) ? globalThis.Number(object.hitPoints) : 0,
      constructionTime: isSet(object.constructionTime) ? globalThis.Number(object.constructionTime) : 0,
    };
  },

  toJSON(message: ShipType): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.hitPoints !== 0) {
      obj.hitPoints = Math.round(message.hitPoints);
    }
    if (message.constructionTime !== 0) {
      obj.constructionTime = Math.round(message.constructionTime);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ShipType>, I>>(base?: I): ShipType {
    return ShipType.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ShipType>, I>>(object: I): ShipType {
    const message = createBaseShipType();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.hitPoints = object.hitPoints ?? 0;
    message.constructionTime = object.constructionTime ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
